# Generated by carnix 0.5.2: carnix -o default.nix --src ./. Cargo.lock
{ lib, buildPlatform, buildRustCrate, fetchgit }:
let kernel = buildPlatform.parsed.kernel.name;
    abi = buildPlatform.parsed.abi.name;
    hasFeature = feature:
      lib.lists.any
        (originName: feature.${originName})
        (builtins.attrNames feature);

    hasDefault = feature:
      let defaultFeatures = builtins.attrNames (feature."default" or {}); in
      (defaultFeatures == [])
      || (lib.lists.any (originName: feature."default".${originName}) defaultFeatures);

    mkFeatures = feat: lib.lists.foldl (features: featureName:
      if featureName != "" && hasFeature feat.${featureName} then
        [ featureName ] ++ features
      else
        features
    ) (if hasDefault feat then [ "default" ] else []) (builtins.attrNames feat);
    aho_corasick_0_5_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "aho-corasick";
      version = "0.5.3";
      authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
      sha256 = "1igab46mvgknga3sxkqc917yfff0wsjxjzabdigmh240p5qxqlnn";
      libName = "aho_corasick";
      crateBin = [ {  name = "aho-corasick-dot"; } ];
      inherit dependencies buildDependencies features;
    };
    ansi_term_0_9_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "ansi_term";
      version = "0.9.0";
      authors = [ "ogham@bsago.me" "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>" ];
      sha256 = "1vcd8m2hglrdi4zmqnkkz5zy3c73ifgii245k7vj6qr5dzpn9hij";
      inherit dependencies buildDependencies features;
    };
    bitflags_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "bitflags";
      version = "0.7.0";
      authors = [ "The Rust Project Developers" ];
      sha256 = "1hr72xg5slm0z4pxs2hiy4wcyx3jva70h58b7mid8l0a4c8f7gn5";
      inherit dependencies buildDependencies features;
    };
    clap_2_20_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "clap";
      version = "2.20.5";
      authors = [ "Kevin K. <kbknapp@gmail.com>" ];
      sha256 = "1i952yi0970754dlnimwlwh4gq7d2zf4ckzcpaz2wvnl2myy0349";
      inherit dependencies buildDependencies features;
    };
    cpuline_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "cpuline";
      version = "0.1.0";
      authors = [ "Till Höppner <till@hoeppner.ws>" ];
      src = ./.;
      inherit dependencies buildDependencies features;
    };
    env_logger_0_3_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "env_logger";
      version = "0.3.5";
      authors = [ "The Rust Project Developers" ];
      sha256 = "1mvxiaaqsyjliv1mm1qaagjqiccw11mdyi3n9h9rf8y6wj15zycw";
      inherit dependencies buildDependencies features;
    };
    kernel32_sys_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "kernel32-sys";
      version = "0.2.2";
      authors = [ "Peter Atashian <retep998@gmail.com>" ];
      sha256 = "1lrw1hbinyvr6cp28g60z97w32w8vsk6pahk64pmrv2fmby8srfj";
      libName = "kernel32";
      build = "build.rs";
      inherit dependencies buildDependencies features;
    };
    libc_0_2_36_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "libc";
      version = "0.2.36";
      authors = [ "The Rust Project Developers" ];
      sha256 = "01633h4yfqm0s302fm0dlba469bx8y6cs4nqc8bqrmjqxfxn515l";
      inherit dependencies buildDependencies features;
    };
    log_0_3_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "log";
      version = "0.3.7";
      authors = [ "The Rust Project Developers" ];
      sha256 = "1qxrwkhpfzhgcmfnw4bl9yy7wwr92wwbin3dp6izcfy58lr369v4";
      inherit dependencies buildDependencies features;
    };
    memchr_0_1_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "memchr";
      version = "0.1.11";
      authors = [ "Andrew Gallant <jamslam@gmail.com>" "bluss" ];
      sha256 = "0x73jghamvxxq5fsw9wb0shk5m6qp3q6fsf0nibn0i6bbqkw91s8";
      inherit dependencies buildDependencies features;
    };
    regex_0_1_80_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "regex";
      version = "0.1.80";
      authors = [ "The Rust Project Developers" ];
      sha256 = "0y4s8ghhx6sgzb35irwivm3w0l2hhqhmdcd2px9hirqnkagal9l6";
      inherit dependencies buildDependencies features;
    };
    regex_syntax_0_3_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "regex-syntax";
      version = "0.3.9";
      authors = [ "The Rust Project Developers" ];
      sha256 = "1mzhphkbwppwd1zam2jkgjk550cqgf6506i87bw2yzrvcsraiw7m";
      inherit dependencies buildDependencies features;
    };
    strsim_0_6_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "strsim";
      version = "0.6.0";
      authors = [ "Danny Guo <dannyguo91@gmail.com>" ];
      sha256 = "1lz85l6y68hr62lv4baww29yy7g8pg20dlr0lbaswxmmcb0wl7gd";
      inherit dependencies buildDependencies features;
    };
    term_size_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "term_size";
      version = "0.2.3";
      authors = [ "Kevin K. <kbknapp@gmail.com>" "Benjamin Sago <ogham@bsago.me>" ];
      sha256 = "16b7gq2dmz7mws4vgai7whxy4xkg4yvlhm7spz0q6jyipqfq87ci";
      inherit dependencies buildDependencies features;
    };
    thread_id_2_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "thread-id";
      version = "2.0.0";
      authors = [ "Ruud van Asseldonk <dev@veniogames.com>" ];
      sha256 = "06i3c8ckn97i5rp16civ2vpqbknlkx66dkrl070iw60nawi0kjc3";
      inherit dependencies buildDependencies features;
    };
    thread_local_0_2_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "thread_local";
      version = "0.2.7";
      authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
      sha256 = "19p0zrs24rdwjvpi10jig5ms3sxj00pv8shkr9cpddri8cdghqp7";
      inherit dependencies buildDependencies features;
    };
    unicode_segmentation_1_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "unicode-segmentation";
      version = "1.2.0";
      authors = [ "kwantam <kwantam@gmail.com>" ];
      sha256 = "0yz43x7wrhr3n7a2zsinx3r60yxsdqicg8a5kycyyhdaq1zmiz1y";
      inherit dependencies buildDependencies features;
    };
    unicode_width_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "unicode-width";
      version = "0.1.4";
      authors = [ "kwantam <kwantam@gmail.com>" ];
      sha256 = "1rp7a04icn9y5c0lm74nrd4py0rdl0af8bhdwq7g478n1xifpifl";
      inherit dependencies buildDependencies features;
    };
    utf8_ranges_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "utf8-ranges";
      version = "0.1.3";
      authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
      sha256 = "1cj548a91a93j8375p78qikaiam548xh84cb0ck8y119adbmsvbp";
      inherit dependencies buildDependencies features;
    };
    vec_map_0_6_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "vec_map";
      version = "0.6.0";
      authors = [ "Alex Crichton <alex@alexcrichton.com>" "Jorge Aparicio <japaricious@gmail.com>" "Alexis Beingessner <a.beingessner@gmail.com>" "Brian Anderson <>" "tbu- <>" "Manish Goregaokar <>" "Aaron Turon <aturon@mozilla.com>" "Adolfo Ochagavía <>" "Niko Matsakis <>" "Steven Fackler <>" "Chase Southwood <csouth3@illinois.edu>" "Eduard Burtescu <>" "Florian Wilkens <>" "Félix Raimundo <>" "Tibor Benke <>" "Markus Siemens <markus@m-siemens.de>" "Josh Branchaud <jbranchaud@gmail.com>" "Huon Wilson <dbau.pp@gmail.com>" "Corey Farwell <coref@rwell.org>" "Aaron Liblong <>" "Nick Cameron <nrc@ncameron.org>" "Patrick Walton <pcwalton@mimiga.net>" "Felix S Klock II <>" "Andrew Paseltiner <apaseltiner@gmail.com>" "Sean McArthur <sean.monstar@gmail.com>" "Vadim Petrochenkov <>" ];
      sha256 = "11y84rck5w53crfrxq3jdsfbzab3vqpvs5mqa4wnnqf27rjmwfsb";
      inherit dependencies buildDependencies features;
    };
    winapi_0_2_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "winapi";
      version = "0.2.8";
      authors = [ "Peter Atashian <retep998@gmail.com>" ];
      sha256 = "0a45b58ywf12vb7gvj6h3j264nydynmzyqz8d8rqxsj6icqv82as";
      inherit dependencies buildDependencies features;
    };
    winapi_build_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "winapi-build";
      version = "0.1.1";
      authors = [ "Peter Atashian <retep998@gmail.com>" ];
      sha256 = "1lxlpi87rkhxcwp2ykf1ldw3p108hwm24nywf3jfrvmff4rjhqga";
      libName = "build";
      inherit dependencies buildDependencies features;
    };

in
rec {
  aho_corasick_0_5_3 = aho_corasick_0_5_3_ rec {
    dependencies = [ memchr_0_1_11 ];
  };
  memchr_0_1_11_features."default".from_aho_corasick_0_5_3__default_ = true;
  ansi_term_0_9_0 = ansi_term_0_9_0_ rec {};
  bitflags_0_7_0 = bitflags_0_7_0_ rec {};
  clap_2_20_5 = clap_2_20_5_ rec {
    dependencies = [ ansi_term_0_9_0 bitflags_0_7_0 libc_0_2_36 strsim_0_6_0 term_size_0_2_3 unicode_segmentation_1_2_0 unicode_width_0_1_4 vec_map_0_6_0 ]
      ++ (if lib.lists.any (x: x == "ansi_term") features then [ansi_term_0_9_0] else [])
      ++ (if lib.lists.any (x: x == "libc") features then [libc_0_2_36] else [])
      ++ (if lib.lists.any (x: x == "strsim") features then [strsim_0_6_0] else [])
      ++ (if lib.lists.any (x: x == "term_size") features then [term_size_0_2_3] else []);
    features = mkFeatures clap_2_20_5_features;
  };
  clap_2_20_5_features."".self = true;
  clap_2_20_5_features."ansi_term".self_color = hasFeature (clap_2_20_5_features."color" or {});
  clap_2_20_5_features."libc".self_color = hasFeature (clap_2_20_5_features."color" or {});
  clap_2_20_5_features."suggestions".self_default = hasDefault clap_2_20_5_features;
  clap_2_20_5_features."color".self_default = hasDefault clap_2_20_5_features;
  clap_2_20_5_features."wrap_help".self_default = hasDefault clap_2_20_5_features;
  clap_2_20_5_features."clippy".self_lints = hasFeature (clap_2_20_5_features."lints" or {});
  clap_2_20_5_features."strsim".self_suggestions = hasFeature (clap_2_20_5_features."suggestions" or {});
  clap_2_20_5_features."libc".self_wrap_help = hasFeature (clap_2_20_5_features."wrap_help" or {});
  clap_2_20_5_features."term_size".self_wrap_help = hasFeature (clap_2_20_5_features."wrap_help" or {});
  clap_2_20_5_features."yaml-rust".self_yaml = hasFeature (clap_2_20_5_features."yaml" or {});
  ansi_term_0_9_0_features."default".from_clap_2_20_5__default_ = true;
  bitflags_0_7_0_features."default".from_clap_2_20_5__default_ = true;
  clippy_0_0_0_features."default".from_clap_2_20_5__default_ = true;
  libc_0_2_36_features."default".from_clap_2_20_5__default_ = true;
  strsim_0_6_0_features."default".from_clap_2_20_5__default_ = true;
  term_size_0_2_3_features."default".from_clap_2_20_5__default_ = true;
  unicode_segmentation_1_2_0_features."default".from_clap_2_20_5__default_ = true;
  unicode_width_0_1_4_features."default".from_clap_2_20_5__default_ = true;
  vec_map_0_6_0_features."default".from_clap_2_20_5__default_ = true;
  yaml_rust_0_0_0_features."default".from_clap_2_20_5__default_ = true;
  cpuline_0_1_0 = cpuline_0_1_0_ rec {
    dependencies = [ clap_2_20_5 env_logger_0_3_5 libc_0_2_36 log_0_3_7 vec_map_0_6_0 ];
  };
  clap_2_20_5_features."default".from_cpuline_0_1_0__default_ = true;
  env_logger_0_3_5_features."default".from_cpuline_0_1_0__default_ = true;
  libc_0_2_36_features."default".from_cpuline_0_1_0__default_ = true;
  log_0_3_7_features."default".from_cpuline_0_1_0__default_ = true;
  vec_map_0_6_0_features."default".from_cpuline_0_1_0__default_ = true;
  env_logger_0_3_5 = env_logger_0_3_5_ rec {
    dependencies = [ log_0_3_7 regex_0_1_80 ]
      ++ (if lib.lists.any (x: x == "regex") features then [regex_0_1_80] else []);
    features = mkFeatures env_logger_0_3_5_features;
  };
  env_logger_0_3_5_features."".self = true;
  env_logger_0_3_5_features."regex".self_default = hasDefault env_logger_0_3_5_features;
  log_0_3_7_features."default".from_env_logger_0_3_5__default_ = true;
  regex_0_1_80_features."default".from_env_logger_0_3_5__default_ = true;
  kernel32_sys_0_2_2 = kernel32_sys_0_2_2_ rec {
    dependencies = [ winapi_0_2_8 ];
    buildDependencies = [ winapi_build_0_1_1 ];
  };
  winapi_0_2_8_features."default".from_kernel32_sys_0_2_2__default_ = true;
  winapi_build_0_1_1_features."default".from_kernel32_sys_0_2_2__default_ = true;
  libc_0_2_36 = libc_0_2_36_ rec {
    features = mkFeatures libc_0_2_36_features;
  };
  libc_0_2_36_features."use_std".self_default = hasDefault libc_0_2_36_features;
  log_0_3_7 = log_0_3_7_ rec {
    features = mkFeatures log_0_3_7_features;
  };
  log_0_3_7_features."use_std".self_default = hasDefault log_0_3_7_features;
  memchr_0_1_11 = memchr_0_1_11_ rec {
    dependencies = [ libc_0_2_36 ];
  };
  libc_0_2_36_features."default".from_memchr_0_1_11__default_ = true;
  regex_0_1_80 = regex_0_1_80_ rec {
    dependencies = [ aho_corasick_0_5_3 memchr_0_1_11 regex_syntax_0_3_9 thread_local_0_2_7 utf8_ranges_0_1_3 ];
    features = mkFeatures regex_0_1_80_features;
  };
  regex_0_1_80_features."simd".self_simd-accel = hasFeature (regex_0_1_80_features."simd-accel" or {});
  aho_corasick_0_5_3_features."default".from_regex_0_1_80__default_ = true;
  memchr_0_1_11_features."default".from_regex_0_1_80__default_ = true;
  regex_syntax_0_3_9_features."default".from_regex_0_1_80__default_ = true;
  simd_0_0_0_features."default".from_regex_0_1_80__default_ = true;
  thread_local_0_2_7_features."default".from_regex_0_1_80__default_ = true;
  utf8_ranges_0_1_3_features."default".from_regex_0_1_80__default_ = true;
  regex_syntax_0_3_9 = regex_syntax_0_3_9_ rec {};
  strsim_0_6_0 = strsim_0_6_0_ rec {};
  term_size_0_2_3 = term_size_0_2_3_ rec {
    dependencies = []
      ++ (if !(kernel == "windows") then [ libc_0_2_36 ] else [])
      ++ (if kernel == "windows" then [ kernel32_sys_0_2_2 winapi_0_2_8 ] else []);
    features = mkFeatures term_size_0_2_3_features;
  };
  term_size_0_2_3_features."clippy".self_lints = hasFeature (term_size_0_2_3_features."lints" or {});
  term_size_0_2_3_features."nightly".self_lints = hasFeature (term_size_0_2_3_features."lints" or {});
  term_size_0_2_3_features."lints".self_travis = hasFeature (term_size_0_2_3_features."travis" or {});
  term_size_0_2_3_features."nightly".self_travis = hasFeature (term_size_0_2_3_features."travis" or {});
  clippy_0_0_0_features."default".from_term_size_0_2_3__default_ = true;
  kernel32_sys_0_2_2_features."default".from_term_size_0_2_3__default_ = true;
  libc_0_2_36_features."default".from_term_size_0_2_3__default_ = true;
  winapi_0_2_8_features."default".from_term_size_0_2_3__default_ = true;
  thread_id_2_0_0 = thread_id_2_0_0_ rec {
    dependencies = [ kernel32_sys_0_2_2 libc_0_2_36 ];
  };
  kernel32_sys_0_2_2_features."default".from_thread_id_2_0_0__default_ = true;
  libc_0_2_36_features."default".from_thread_id_2_0_0__default_ = true;
  thread_local_0_2_7 = thread_local_0_2_7_ rec {
    dependencies = [ thread_id_2_0_0 ];
  };
  thread_id_2_0_0_features."default".from_thread_local_0_2_7__default_ = true;
  unicode_segmentation_1_2_0 = unicode_segmentation_1_2_0_ rec {
    features = mkFeatures unicode_segmentation_1_2_0_features;
  };
  unicode_segmentation_1_2_0_features."".self = true;
  unicode_width_0_1_4 = unicode_width_0_1_4_ rec {
    features = mkFeatures unicode_width_0_1_4_features;
  };
  unicode_width_0_1_4_features."".self = true;
  utf8_ranges_0_1_3 = utf8_ranges_0_1_3_ rec {};
  vec_map_0_6_0 = vec_map_0_6_0_ rec {
    dependencies = [];
    features = mkFeatures vec_map_0_6_0_features;
  };
  vec_map_0_6_0_features."serde".self_eders = hasFeature (vec_map_0_6_0_features."eders" or {});
  vec_map_0_6_0_features."serde_macros".self_eders = hasFeature (vec_map_0_6_0_features."eders" or {});
  serde_0_0_0_features."default".from_vec_map_0_6_0__default_ = true;
  serde_macros_0_0_0_features."default".from_vec_map_0_6_0__default_ = true;
  winapi_0_2_8 = winapi_0_2_8_ rec {};
  winapi_build_0_1_1 = winapi_build_0_1_1_ rec {};
}
